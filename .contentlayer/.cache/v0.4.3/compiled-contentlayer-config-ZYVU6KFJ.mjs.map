{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"@contentlayer2/source-files\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport remarkGfm from \"remark-gfm\";\n\nexport const Chapter = defineDocumentType(() => ({\n  name: \"Chapter\",\n  filePathPattern: `novels/**/chapters/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    chapter: { type: \"number\", required: true },\n    date: { type: \"date\", required: true },\n    series: { type: \"string\", required: true },\n    synopsis: { type: \"string\", required: false },\n    status: { type: \"string\", required: false },\n    characters: { type: \"list\", of: { type: \"string\" }, required: false }\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => {\n        const parts = doc._raw.flattenedPath.split(\"/\");\n        const series = parts[1];\n        const file = parts.at(-1)?.replace(/\\.mdx?$/, \"\") || \"chapter\";\n        return `/novels/${series}/${file}`;\n      }\n    },\n    seriesSlug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath.split(\"/\")[1]\n    }\n  }\n}));\n\nexport const Wiki = defineDocumentType(() => ({\n  name: \"Wiki\",\n  filePathPattern: `wiki/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: false },\n    tags: { type: \"list\", of: { type: \"string\" }, required: false }\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => `/wiki/${doc._raw.flattenedPath.split(\"/\").at(-1)}`\n    }\n  }\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Chapter, Wiki],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: \"wrap\" }]]\n  }\n});"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,eAAe;AAEf,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,QAAQ,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC1C,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,EACtE;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG;AAC9C,cAAM,SAAS,MAAM,CAAC;AACtB,cAAM,OAAO,MAAM,GAAG,EAAE,GAAG,QAAQ,WAAW,EAAE,KAAK;AACrD,eAAO,WAAW,MAAM,IAAI,IAAI;AAAA,MAClC;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,CAAC;AAAA,IACvD;AAAA,EACF;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC3C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,EAChE;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,IACrE;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AAAA,EAC7B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,EAC5E;AACF,CAAC;",
  "names": []
}
